{"version":3,"sources":["../src/tests/hyper.js"],"names":["HyperTest","generateGraph","ids","describe","it","done","graph","insert","source","target","error","id1","ifError","id2","id3","fetch","sort","id","links","lengthOf","deepEqual","undefined","update","remove","count","equal","add","removed"],"mappings":"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","file":"hyper.js","sourcesContent":["import { assert } from 'chai';\n\nexport function HyperTest (generateGraph, ids) {\n  describe('Test hyper links', function() {\n    it('should insert and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: [ids[0], ids[1]], target: [ids[0]] }, (error, id1) => {\n        assert.ifError(error);\n        graph.insert({ source: [ids[2]], target: [ids[1]] }, (error, id2) => {\n          assert.ifError(error);\n          graph.insert({ source: [ids[0]], target: [ids[1]] }, (error, id3) => {\n            assert.ifError(error);\n            graph.fetch({ source: ids[0] }, { sort: { id: false } }, (error, links) => {\n              assert.lengthOf(links, 2);\n              assert.deepEqual(links[0], { id: id1, source: [ids[0], ids[1]], target: [ids[0]] });\n              assert.deepEqual(links[1], { id: id3, source: [ids[0]], target: [ids[1]] });\n              done();\n            });\n          });\n        });\n      });\n    });\n    it('should insert and update and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: [ids[0], ids[1], ids[2]], target: [ids[0]] }, (error, id1) => {\n        graph.fetch(id1, undefined, (error, links) => {\n          assert.lengthOf(links, 1);\n          assert.deepEqual(links[0], { id: id1, source: [ids[0], ids[1], ids[2]], target: [ids[0]] });\n          graph.update(id1, { source: { remove: ids[1] } }, (error, count) => {\n            assert.ifError(error);\n            assert.equal(count, 1);\n            graph.fetch({ source: [ids[2]] }, undefined, (error, links) => {\n              assert.ifError(error);\n              assert.lengthOf(links, 1);\n              assert.deepEqual(links[0], { id: id1, source: [ids[0], ids[2]], target: [ids[0]] });\n              graph.update({ source: ids[2] }, { target: { remove: ids[0], add: ids[1] } }, (error, count) => {\n                assert.ifError(error);\n                assert.equal(count, 1);\n                graph.fetch({ target: ids[1] }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 1);\n                  assert.deepEqual(links[0], { id: id1, source: [ids[0], ids[2]], target: [ids[1]] });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n    it('should remove links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: [ids[0], ids[1]] }, (error, id1) => {\n        graph.insert({ source: [ids[1], ids[2]], target: [ids[2]] }, (error, id2) => {\n          graph.insert({ source: ids[1] }, (error, id3) => {\n            graph.remove(id1, (error, removed) => {\n              assert.ifError(error);\n              assert.equal(removed, 1);\n              graph.remove({ source: ids[1], target: undefined }, (error, removed) => {\n                assert.ifError(error);\n                assert.equal(removed, 1);\n                graph.fetch({ source: ids[1] }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 1);\n                  assert.deepEqual(links[0], { id: id2, source: [ids[1], ids[2]], target: [ids[2]] });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}"]}
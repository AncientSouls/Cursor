{"version":3,"sources":["../src/tests/empty.js"],"names":["EmptyTest","generateGraph","ids","describe","it","done","graph","insert","error","id1","ifError","id2","id3","fetch","sort","id","links","lengthOf","deepEqual","undefined","update","source","count","equal","target","remove","removed"],"mappings":"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","file":"empty.js","sourcesContent":["import { assert } from 'chai';\n\nexport function EmptyTest (generateGraph, ids) {\n  describe('Test empty links', function() {\n    it('should insert and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({}, (error, id1) => {\n        assert.ifError(error);\n        graph.insert({}, (error, id2) => {\n          assert.ifError(error);\n          graph.insert({}, (error, id3) => {\n            assert.ifError(error);\n            graph.fetch({}, { sort: { id: false } }, (error, links) => {\n              assert.lengthOf(links, 3);\n              assert.deepEqual(links[0], { id: id1 });\n              assert.deepEqual(links[1], { id: id2 });\n              assert.deepEqual(links[2], { id: id3 });\n              done();\n            });\n          });\n        });\n      });\n    });\n    it('should insert and update and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({}, (error, id1) => {\n        graph.fetch(id1, undefined, (error, links) => {\n          assert.lengthOf(links, 1);\n          assert.deepEqual(links[0], { id: id1 });\n          graph.update(id1, { source: ids[0] }, (error, count) => {\n            assert.ifError(error);\n            assert.equal(count, 1);\n            graph.fetch({ target: undefined }, undefined, (error, links) => {\n              assert.ifError(error);\n              assert.lengthOf(links, 1);\n              assert.deepEqual(links[0], { id: id1, source: ids[0] });\n              graph.update({ target: undefined }, { target: ids[1] }, (error, count) => {\n                assert.ifError(error);\n                assert.equal(count, 1);\n                graph.fetch({ target: ids[1], source: ids[0] }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 1);\n                  assert.deepEqual(links[0], { id: id1, source: ids[0], target: ids[1] });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n    it('should remove links', (done) => {\n      var graph = generateGraph();\n      graph.insert({}, (error, id1) => {\n        graph.insert({}, (error, id2) => {\n          graph.insert({}, (error, id3) => {\n            graph.remove(id1, (error, removed) => {\n              assert.ifError(error);\n              assert.equal(removed, 1);\n              graph.remove({ source: undefined, target: undefined }, (error, removed) => {\n                assert.ifError(error);\n                assert.equal(removed, 2);\n                graph.fetch({ source: undefined, target: undefined }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 0);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}"]}
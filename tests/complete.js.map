{"version":3,"sources":["../src/tests/complete.js"],"names":["CompleteTest","generateGraph","ids","describe","it","done","graph","insert","source","target","error","id1","ifError","id2","id3","fetch","sort","id","links","lengthOf","deepEqual","undefined","update","count","equal","remove","removed"],"mappings":"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","file":"complete.js","sourcesContent":["import { assert } from 'chai';\n\nexport function CompleteTest (generateGraph, ids) {\n  describe('Test complete links', function() {\n    it('should insert and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: ids[0], target: ids[0] }, (error, id1) => {\n        assert.ifError(error);\n        graph.insert({ source: ids[0], target: ids[1] }, (error, id2) => {\n          assert.ifError(error);\n          graph.insert({ source: ids[0], target: ids[2] }, (error, id3) => {\n            assert.ifError(error);\n            graph.fetch({ source: ids[0] }, { sort: { id: false } }, (error, links) => {\n              assert.lengthOf(links, 3);\n              assert.deepEqual(links[0], { id: id1, source: ids[0], target: ids[0] });\n              assert.deepEqual(links[1], { id: id2, source: ids[0], target: ids[1] });\n              assert.deepEqual(links[2], { id: id3, source: ids[0], target: ids[2] });\n              done();\n            });\n          });\n        });\n      });\n    });\n    it('should insert and update and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: ids[0], target: ids[0] }, (error, id1) => {\n        graph.fetch(id1, undefined, (error, links) => {\n          assert.lengthOf(links, 1);\n          assert.deepEqual(links[0], { id: id1, source: ids[0], target: ids[0] });\n          graph.update(id1, { source: ids[1] }, (error, count) => {\n            assert.ifError(error);\n            assert.equal(count, 1);\n            graph.fetch({ source: ids[1] }, undefined, (error, links) => {\n              assert.ifError(error);\n              assert.lengthOf(links, 1);\n              assert.deepEqual(links[0], { id: id1, source: ids[1], target: ids[0] });\n              graph.update({ source: ids[1] }, { target: ids[2] }, (error, count) => {\n                assert.ifError(error);\n                assert.equal(count, 1);\n                graph.fetch({ target: ids[2] }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 1);\n                  assert.deepEqual(links[0], { id: id1, source: ids[1], target: ids[2] });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n    it('should remove links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: ids[0], target: ids[0] }, (error, id1) => {\n        graph.insert({ source: ids[0], target: ids[1] }, (error, id2) => {\n          graph.insert({ source: ids[0], target: ids[2] }, (error, id3) => {\n            graph.remove(id1, (error, removed) => {\n              assert.ifError(error);\n              assert.equal(removed, 1);\n              graph.remove({ source: ids[0] }, (error, removed) => {\n                assert.ifError(error);\n                assert.equal(removed, 2);\n                graph.fetch({ source: ids[0] }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 0);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}"]}
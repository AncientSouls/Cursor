{"version":3,"sources":["../src/tests/incomplete.js"],"names":["IncompleteTest","generateGraph","ids","describe","it","done","graph","insert","source","error","id1","ifError","id2","target","id3","fetch","undefined","sort","id","links","lengthOf","deepEqual","update","count","equal","remove","removed"],"mappings":"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","file":"incomplete.js","sourcesContent":["import { assert } from 'chai';\n\nexport function IncompleteTest (generateGraph, ids) {\n  describe('Test incomplete links', function() {\n    it('should insert and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: ids[0] }, (error, id1) => {\n        assert.ifError(error);\n        graph.insert({ source: ids[0] }, (error, id2) => {\n          assert.ifError(error);\n          graph.insert({ source: ids[0], target: ids[1] }, (error, id3) => {\n            assert.ifError(error);\n            graph.fetch({ source: ids[0], target: undefined }, { sort: { id: false } }, (error, links) => {\n              assert.lengthOf(links, 2);\n              assert.deepEqual(links[0], { id: id1, source: ids[0] });\n              assert.deepEqual(links[1], { id: id2, source: ids[0] });\n              done();\n            });\n          });\n        });\n      });\n    });\n    it('should insert and update and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: ids[0], target: ids[0] }, (error, id1) => {\n        graph.fetch(id1, undefined, (error, links) => {\n          assert.lengthOf(links, 1);\n          assert.deepEqual(links[0], { id: id1, source: ids[0], target: ids[0] });\n          graph.update(id1, { source: undefined }, (error, count) => {\n            assert.ifError(error);\n            assert.equal(count, 1);\n            graph.fetch({ source: undefined }, undefined, (error, links) => {\n              assert.ifError(error);\n              assert.lengthOf(links, 1);\n              assert.deepEqual(links[0], { id: id1, target: ids[0] });\n              graph.update({ source: undefined }, { target: ids[1] }, (error, count) => {\n                assert.ifError(error);\n                assert.equal(count, 1);\n                graph.fetch({ target: ids[1], source: undefined }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 1);\n                  assert.deepEqual(links[0], { id: id1, target: ids[1] });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n    it('should remove links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: ids[0] }, (error, id1) => {\n        graph.insert({ source: ids[1], target: ids[2] }, (error, id2) => {\n          graph.insert({ source: ids[1] }, (error, id3) => {\n            graph.remove(id1, (error, removed) => {\n              assert.ifError(error);\n              assert.equal(removed, 1);\n              graph.remove({ source: ids[1], target: undefined }, (error, removed) => {\n                assert.ifError(error);\n                assert.equal(removed, 1);\n                graph.fetch({ source: ids[1] }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 1);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}"]}
{"version":3,"sources":["../src/lib/graph.js"],"names":["factoryGraph","ParentClass","Graph","collection","fields","config","arguments","aliases","f","_aliases","a","insert","prototype","Error","update","remove","query","options","fetch","get","each","map","count","on","link","callback","context","selector","modifier","event"],"mappings":"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","file":"graph.js","sourcesContent":["/**\n * This method allows you to use Graph class to its inheritance chain.\n *\n * @param {Class} ParentClass\n * @return {Class} Graph\n */\nfunction factoryGraph(ParentClass) {\n  \n  if (!ParentClass) {\n    var ParentClass = class {}\n  }\n  \n  /**\n   * Class to inherit. Class with methods for control links in graph.\n   * Must be completed for adaptation to a particular database.\n   * \n   * @class\n   * @description `import { Graph } from 'ancient-graph';`\n   */\n  class Graph extends ParentClass {\n    \n    /**\n     * Construct new graph and checks for required adaptation methods.\n     * @throws {Error} if the adapter methods is not complete\n     * \n     * @param {} collection - A pointer to the collection dannymineobhodimye daapteru to work with the graph. This may be a connection to the SQL database and table name, for example, or a collection of Mongo. \n     * @param {Object.<string, string>} fields - Comparison of the data in the collection of data in the graph. It is necessary for the adapter.\n     * @param {Object} [config] - Additional config.\n     * @param {Object} [config.aliases]\n     * @param {String} [config.aliases.$]\n     */\n    constructor(collection, fields, config) {\n      super(...arguments);\n      this.collection = collection;\n      this.fields = fields;\n      if (typeof(config) != 'object') var config = {};\n      this.config = config;\n      if (typeof(config.aliases) != 'object') config.aliases = {};\n      for (var f in fields) {\n        if (!config.aliases[f]) config.aliases[f] = f;\n      }\n      this.config._aliases = {};\n      for (var a in this.config.aliases) {\n        this.config._aliases[this.config.aliases[a]] = a;\n      }\n      if (this.insert == Graph.prototype.insert) {\n        throw new Error('Method `insert` is not adapted.');\n      }\n      if (this.update == Graph.prototype.update) {\n        throw new Error('Method `update` is not adapted.');\n      }\n      if (this.remove == Graph.prototype.remove) {\n        throw new Error('Method `remove` is not adapted.');\n      }\n      if (this.query == Graph.prototype.query) {\n        throw new Error('Method `query` is not adapted.');\n      }\n      if (this.options == Graph.prototype.options) {\n        throw new Error('Method `options` is not adapted.');\n      }\n      if (this.fetch == Graph.prototype.fetch) {\n        throw new Error('Method `fetch` is not adapted.');\n      }\n      if (this.get == Graph.prototype.get) {\n        throw new Error('Method `get` is not adapted.');\n      }\n      if (this.each == Graph.prototype.each) {\n        throw new Error('Method `each` is not adapted.');\n      }\n      if (this.map == Graph.prototype.map) {\n        throw new Error('Method `map` is not adapted.');\n      }\n      if (this.count == Graph.prototype.count) {\n        throw new Error('Method `count` is not adapted.');\n      }\n      if (this.on == Graph.prototype.on) {\n        throw new Error('Method `on` is not adapted.');\n      }\n    }\n    \n    /**\n     * Should insert new link into graph.\n     * If the database allows, it is recommended to return a synchronous result. This can be useful in your application. But for writing generic code, it is recommended to only use the callback result.\n     * \n     * @param {Link} link\n     * @param {Graph~insertCallback} [callback]\n     * @param {Object} [context]\n     * @return {string} [id]\n     */\n    insert(link, callback, context) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted link as the second.\n     *\n     * @callback Graph~insertCallback\n     * @param {Error} [error]\n     * @param {string} [id]\n     */\n    \n    /**\n     * Should update to new state of modifier object link by unique id or by link query object.\n     * If the database allows, it is recommended to return a synchronous result. This can be useful in your application. But for writing generic code, it is recommended to only use the callback result.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {LinkModifier} modifier\n     * @param {Graph~updateCallback} [callback]\n     * @param {Object} [context]\n     * @return {number} [count]\n     */\n    update(selector, modifier, callback, context) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n     *\n     * @callback Graph~updateCallback\n     * @param {Error} [error]\n     * @param {number} [count]\n     */\n    \n    /**\n     * Should remove link by unique id or by link query object.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {Graph~removeCallback} [callback]\n     * @param {Object} [context]\n     */\n    remove(selector, callback, context) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument.\n     *\n     * @callback Graph~removeCallback\n     * @param {Error} [error]\n     * @param {number} [count]\n     */\n    \n    /**\n     * Should generate adapter for database query for links search by unique id or by link query object.\n     * \n     * @param {string|LinkSelector} selector\n     * @return {*} query\n     */\n    query(selector) {}\n    \n    /**\n     * Should generate adapter for database options. \n     * \n     * @param {Object} [options]\n     * @return {*} options - a options suitable for the database\n     */\n    options(options) {}\n    \n    /**\n     * Find and all matching links as an Array.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {SelectOptions} [options]\n     * @param {Graph~fetchCallback} [callback]\n     * @return {Link[]} links - result links objects in array\n     */\n    fetch(selector, options, callback) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the result links objects in array.\n     *\n     * @callback Graph~fetchCallback\n     * @param {Error} [error]\n     * @param {Link[]} [links]\n     */\n    \n    /**\n     * Get one first matching link.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {SelectOptions} [options]\n     * @param {Graph~getCallback} [callback]\n     * @return {Link} link - result link object\n     */\n    get(selector, options, callback) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the result link object.\n     *\n     * @callback Graph~getCallback\n     * @param {Error} [error]\n     * @param {Link} [link]\n     */\n    \n    /**\n     * Should call callback once for each matching document, sequentially and synchronously.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {SelectOptions} [options]\n     * @param {Graph~eachCallback} [callback]\n     */\n    each(selector, options, callback) {}\n    \n    /**\n     * @callback Graph~eachCallback\n     * @param {Link} [link]\n     */\n    \n    /**\n     * Should map callback over all matching documents. Returns an Array.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {SelectOptions} [options]\n     * @param {Graph~mapCallback} [callback]\n     * @return {Array} results\n     */\n    map(selector, options, callback) {}\n    \n    /**\n     * @callback Graph~mapCallback\n     * @param {Link} [link]\n     * @return {*} result\n     */\n    \n    /**\n     * Should count all matching documents.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {SelectOptions} [options]\n     * @param {Graph~countCallback} [callback]\n     * @return {number} [count]\n     */\n    count(selector, options, callback) {}\n    \n    /**\n     * @callback Graph~countCallback\n     * @param {Error} [error]\n     * @param {number} [count]\n     */\n    \n    /**\n     * Should subscribe to the events: link, unlink, insert, update, remove.\n     * \n     * @param {string} event - One event name\n     * @param {Graph~onCallback} callback\n     * @returns {Function} Stops event subscription.\n     * @example\n     * var counter = 0;\n     * var stop = graph.on('update', (oldData, newData) => {\n     *   if (oldData.id == '1') console.log(oldData.id, 'is changed');\n     *   counter++;\n     *   if (counter == 3) stop();\n     * });\n     */\n    on(event, callback) {}\n    \n    /**\n     * @callback Graph~onCallback\n     * @param {Link} [oldLink] - can be undefined on link and insert events\n     * @param {Link} [newLink] - can be undefined on unlink and remove events\n     * @param {Object} [context] - additional app information, such as context.userId\n     */\n  };\n  \n  return Graph;\n}\n\nvar Graph = factoryGraph();\n\nexport { factoryGraph, Graph };"]}
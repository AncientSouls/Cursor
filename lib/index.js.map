{"version":3,"sources":["../src/lib/index.js"],"names":["executeBundle","executeBundleSet","executeBundleUnset","executeBundleSplice","Cursor","BundlesQueue","CursorsManager","ApiManager","bundle","cursor","executers","type","set","path","value","undefined","splice","start","deleteCount","items","unset"],"mappings":"wLAuCgBA,a,CAAAA,a,SAQAC,gB,CAAAA,gB,SAQAC,kB,CAAAA,kB,SAQAC,mB,CAAAA,mB,CA3DhB,0B,yCACA,8B,6CACA,8B,6CAEA,gC,6CACA,4C,yDACA,gD,6DACA,wC,oTAGEC,M,0BACAC,Y,gCACAC,c,kCACAC,U,sBAsBK,QAASP,cAAT,CAAuBQ,MAAvB,CAA+BC,MAA/B,CAAuCC,SAAvC,CAAkD,CACvDA,UAAUF,OAAOG,IAAjB,EAAuBH,MAAvB,CAA+BC,MAA/B,CACD,CAMM,QAASR,iBAAT,CAA0BO,MAA1B,CAAkCC,MAAlC,CAA0C,CAC/CA,OAAOG,GAAP,CAAWJ,OAAOK,IAAlB,CAAwBL,OAAOM,KAA/B,CACD,CAMM,QAASZ,mBAAT,CAA4BM,MAA5B,CAAoCC,MAApC,CAA4C,CACjDA,OAAOG,GAAP,CAAWJ,OAAOK,IAAlB,CAAwBE,SAAxB,CACD,CAMM,QAASZ,oBAAT,CAA6BK,MAA7B,CAAqCC,MAArC,CAA6C,CAClDA,OAAOO,MAAP,eAAcR,OAAOK,IAArB,CAA2BL,OAAOS,KAAlC,CAAyCT,OAAOU,WAAhD,4BAAgEV,OAAOW,KAAvE,GACD,CAKM,GAAIT,6BAAY,CACrBE,IAAKX,gBADgB,CAErBmB,MAAOlB,kBAFc,CAGrBc,OAAQb,mBAHa,CAAhB","file":"index.js","sourcesContent":["/**\n * @module ancient-cursor\n */\n\nimport repl from 'repl';\nimport lodash from 'lodash';\nimport EventEmitter from 'events';\n\nimport Cursor from './Cursor';\nimport BundlesQueue from './BundlesQueue';\nimport CursorsManager from './CursorsManager';\nimport ApiManager from './ApiManager';\n\nexport {\n  Cursor,\n  BundlesQueue,\n  CursorsManager,\n  ApiManager,\n};\n\n/**\n * @typedef {Object} Bundle\n * @property {number} cursor - id of cursor on current client\n * @property {string} type - set, unset or splice string\n * @property {string|string[]} path\n * @property {*=} value - if used set type\n * @property {number} start - if used splice type\n * @property {number} deleteCount - if used splice type\n * @property {Array} items - if used splice type\n */\n\n/**\n * Attention! If the executers object does not have the correct executer type, an error will be thrown.\n * @param {Bundle} bundle\n * @param {Object} executers\n * @param {parseBundle~parser} executers.* - executers for each possible bundle\n * @param {Cursor} cursor\n * @throws Uncaught TypeError: executers[bundle.type] is not a function\n */\nexport function executeBundle(bundle, cursor, executers) {\n  executers[bundle.type](bundle, cursor);\n}\n\n/**\n * @param {Bundle} bundle\n * @param {Cursor} cursor\n */\nexport function executeBundleSet(bundle, cursor) {\n  cursor.set(bundle.path, bundle.value);\n}\n\n/**\n * @param {Bundle} bundle\n * @param {Cursor} cursor\n */\nexport function executeBundleUnset(bundle, cursor) {\n  cursor.set(bundle.path, undefined);\n}\n\n/**\n * @param {Bundle} bundle\n * @param {Cursor} cursor\n */\nexport function executeBundleSplice(bundle, cursor) {\n  cursor.splice(bundle.path, bundle.start, bundle.deleteCount, ...bundle.items);\n}\n\n/**\n * Default executers object.\n */\nexport var executers = {\n  set: executeBundleSet,\n  unset: executeBundleUnset,\n  splice: executeBundleSplice,\n};"]}
{"version":3,"sources":["../src/lib/Cursor.js"],"names":["Cursor","query","data","adapterDestroyed","id","emitter","path","current","_path","toPath","oldByPath","get","length","set","emit","old","action","toArray","arguments","start","deleteCount","items","clone","isArray","Error","splice","handler","on","isNull","eventPath","stop","listener","changes","isClone","oldValue","currentValue","eventPathLocal","slice","isEqual","removeListener","_generateListener","once"],"mappings":"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","file":"Cursor.js","sourcesContent":["import lodash from 'lodash';\nimport EventEmitter from 'events';\n\n/**\n * One query capsule.\n * @class\n * @memberof module:ancient-cursor\n */\nclass Cursor {\n  \n  /**\n   * @constructs Cursor\n   * @param query - Query resolves current cursor .We keep it just in case. Suddenly, to work with data, you need to compare them with the query?\n   * @param data - Any data by resolved query.\n   * @param {Cursor~adapterDestroyed} adapterDestroyed\n   * @param {string|number} [id]\n   */\n  constructor(query, data, adapterDestroyed, id) {\n    this.query = query;\n    this.data = data;\n    this.adapterDestroyed = adapterDestroyed;\n    this.id = id;\n    this.emitter = new EventEmitter();\n  }\n  \n  /**\n   * Way to change data changes in specified path.\n   * @param {string|string[]} path\n   * @param current\n   */\n  set(path, current) {\n    var _path = lodash.toPath(path); \n    \n    var oldByPath = lodash.get(this.data, _path);\n    \n    if (!_path.length) this.data = current;\n    else this.data = lodash.set(this.data || {}, _path, current);\n    \n    this.emitter.emit('changed', { old: oldByPath, path: _path, action: 'set', 'arguments': lodash.toArray(arguments), });\n  }\n  \n  /**\n   * Way to change array data in specified path. Unlike the standard splice, all arguments are required, except items.\n   * @param {string|string[]} path\n   * @param {number} start\n   * @param {number} deleteCount\n   * @param {...*} [items]\n   */\n  splice(path, start, deleteCount, ...items) {\n    var _path = lodash.toPath(path); \n    \n    var oldByPath = lodash.clone(lodash.get(this.data, _path));\n    \n    var data = this.get(_path);\n    \n    if (!lodash.isArray(data)) throw new Error(`Data by path is not an array.`);\n    \n    data.splice(start, deleteCount, ...items);\n    \n    this.emitter.emit('changed', { old: oldByPath, path: _path, action: 'splice', 'arguments': lodash.toArray(arguments), });\n  }\n  \n  /**\n   * Getter from data. Handler can observe changes by current path in data.\n   * @param {string|string[]} path\n   * @param {Cursor~handler} [handler] - Notify you about changes in data by path.\n   * @return data - Returns someting from data by spcefied path.\n   */\n  get(path = null, handler) {\n    this.on(path, handler);\n    return lodash.isNull(path)?this.data:lodash.get(this.data, path);\n  }\n  \n  _generateListener(path, handler) {\n    var eventPath = lodash.toPath(path);\n    var stop, listener;\n    if (typeof(handler) == 'function') {\n      listener = (changes) => {\n        var isClone, oldValue, currentValue;\n        var eventPathLocal = eventPath.slice(changes.path.length);\n        \n        if (changes.path.length <= eventPath.length) {\n          if (lodash.isEqual(changes.path, eventPath.slice(0, changes.path.length))) {\n            isClone = true;\n            oldValue = eventPathLocal.length?lodash.get(changes.old, eventPathLocal):changes.old;\n            currentValue = eventPath.length?lodash.get(this.data, eventPath):this.data;\n          } else return;\n        } else {\n          if (lodash.isEqual(eventPath, changes.path.slice(0, eventPath.length))) {\n            isClone = false;\n            oldValue = currentValue = eventPath.length?lodash.get(this.data, eventPath):this.data;\n          } else return;\n        }\n        \n        handler(oldValue, currentValue, stop, changes, isClone, this);\n      };\n      stop = () => this.emitter.removeListener('changed', listener);\n    }\n    return { listener, stop };\n  }\n  \n  /**\n   * Handle event changed, as get handler argument, but returns stop method.\n   * @param {string|string[]} path\n   * @param {Cursor~handler} [handler] - Notify you about changes in data by path.\n   * @return {Function} stop\n   */\n  on(path = null, handler) {\n    var { listener, stop } = this._generateListener(path, handler);\n    if (listener) this.emitter.on('changed', listener);\n    return stop;\n  }\n  \n  /**\n   * Adds a one time listener function for the data by path changes. The next time changes is triggered, this listener is removed after invoked.\n   * @param {string|string[]} path\n   * @param {Cursor~handler} [handler] - Notify you about changes in data by path.\n   */\n  once(path = null, handler) {\n    var { listener, stop } = this._generateListener(path, handler);\n    if (listener) this.emitter.once('changed', listener);\n    return stop;\n  }\n\n  /**\n   * Destroy current cursor.\n   * If cursor constructed with adapterDestroyed method, then call `this.adapterDestroyed` method. If cursor constructed from `CursorManager`, it remove cursor from `this.manager.cursors` and unset `this.id`.\n   * Has no other effects.\n   */\n  destroy() {\n    if (typeof(this.adapterDestroyed) == 'function') {\n      this.adapterDestroyed(this);\n    }\n  }\n}\n\n/**\n * @callback Cursor~adapterDestroyed\n * @memberof module:ancient-cursor\n * @param {Cursor} cursor\n */\n\n/**\n * @callback Cursor~handler\n * @memberof module:ancient-cursor\n * @param old - Link to this data old the change.\n * @param current - Link to this data current the change.\n * @param {Function} stop\n * @param {Object} changes\n * @param changes.old\n * @param {string[]} changes.path\n * @param {string} changes.action\n * @param {Array} changes.arguments\n * @param {boolean} isClone - True if changed path deeper then event path. For details, read attention.\n * @param {Cursor} cursor\n * @description\n * **Attention!** If the path leads to a higher level of data from the changed, the link to the data `old` the change will lead to the same location as link `current` the change. If the path leads to a changed level or deeper, then `old` and `current` will differ.\n */\n\n export default Cursor;"]}
{"version":3,"sources":["../src/lib/ApiManager.js"],"names":["ApiManager","adapterFindApi","adapterSend","relations","apiQuery","channelId","query","cursorId","findApi","then","api","set","receiveQuery","bundles","cursors","get","promises","apis","push","Promise","channelDisconnected","cursorDestroyed"],"mappings":"ikBAAA,8B,kRA+CMA,W,YAOJ,oBAAYC,cAAZ,CAA4BC,WAA5B,CAAyC,kCACvC,KAAKD,cAAL,CAAsBA,cAAtB,CACA,KAAKC,WAAL,CAAmBA,WAAnB,CACA,KAAKC,SAAL,CAAiB,EAClB,C,+DAOOC,Q,CAAU,CAChB,MAAO,MAAKH,cAAL,CAAoBG,QAApB,CACR,C,kDAUYC,S,CAAWD,Q,CAAUE,K,CAAOC,Q,CAAU,gBACjD,MAAO,MAAKC,OAAL,CAAaJ,QAAb,EAAuBK,IAAvB,CAA4B,SAACC,GAAD,CAAS,CAC1C,iBAAOC,GAAP,CAAW,MAAKR,SAAhB,CAA2B,CAACE,SAAD,CAAYE,QAAZ,CAA3B,CAAkDH,QAAlD,EACAM,IAAIE,YAAJ,CACEP,SADF,CACaC,KADb,CACoBC,QADpB,CAEE,SAACF,SAAD,CAA2B,+BAAZQ,OAAY,iDAAZA,OAAY,yBACzB,MAAKX,WAAL,CAAiBG,SAAjB,CAA4BQ,OAA5B,CACD,CAJH,EAMA,MAAOH,IACR,CATM,CAUR,C,gEAMmBL,S,CAAW,iBAC7B,GAAIS,SAAU,iBAAOC,GAAP,CAAW,KAAKZ,SAAhB,CAA2B,CAACE,SAAD,CAA3B,CAAd,CAEA,GAAIW,UAAW,EAAf,CACA,GAAIC,MAAO,EAAX,CACA,IAAK,GAAIV,SAAT,GAAqBO,QAArB,CAA8B,CAC5B,GAAI,CAACG,KAAKH,QAAQP,QAAR,CAAL,CAAL,CAA8B,CAC5BU,KAAKH,QAAQP,QAAR,CAAL,EAA0B,IAA1B,CACAS,SAASE,IAAT,CAAe,SAACb,SAAD,CAAYE,QAAZ,CAAyB,CACtC,MAAO,IAAIY,QAAJ,CAAY,UAAM,CACvB,MAAO,QAAKX,OAAL,CAAaM,QAAQP,QAAR,CAAb,EAAgCE,IAAhC,CAAqC,SAACC,GAAD,CAAS,CACnD,iBAAOC,GAAP,CAAW,OAAKR,SAAhB,CAA2B,CAACE,SAAD,CAAYE,QAAZ,CAA3B,CAAkDO,QAAQP,QAAR,CAAlD,EACA,GAAI,MAAOG,KAAIU,mBAAX,EAAkC,UAAtC,CAAkD,CAChDV,IAAIU,mBAAJ,CACEf,SADF,CACa,SAACA,SAAD,CAA2B,gCAAZQ,OAAY,uDAAZA,OAAY,2BACpC,OAAKX,WAAL,CAAiBG,SAAjB,CAA4BQ,OAA5B,CACD,CAHH,CAKD,CACD,MAAOH,IACR,CAVM,CAWR,CAZM,CAaR,CAda,CAcXL,SAdW,CAcAE,QAdA,CAAd,CAeD,CACDS,SAASE,IAAT,CAAe,SAACb,SAAD,CAAYE,QAAZ,CAAyB,CACtC,MAAO,IAAIY,QAAJ,CAAY,iBAAM,QAAKE,eAAL,CAAqBhB,SAArB,CAAgCE,QAAhC,CAAN,CAAZ,CACR,CAFa,CAEXF,SAFW,CAEAE,QAFA,CAAd,CAGD,CAED,MAAO,MAAKJ,SAAL,CAAeE,SAAf,CAAP,CAEA,MAAOW,SACR,C,wDAOeX,S,CAAWE,Q,CAAU,iBACnC,GAAIH,UAAW,iBAAOW,GAAP,CAAW,KAAKZ,SAAhB,CAA2B,CAACE,SAAD,CAAYE,QAAZ,CAA3B,CAAf,CACA,MAAO,MAAKC,OAAL,CAAaJ,QAAb,EAAuBK,IAAvB,CAA4B,SAACC,GAAD,CAAS,CAC1C,GAAI,MAAOA,KAAIW,eAAX,EAA8B,UAAlC,CAA8C,CAC5CX,IAAIW,eAAJ,CACEhB,SADF,CACaE,QADb,CAEE,SAACF,SAAD,CAA2B,gCAAZQ,OAAY,uDAAZA,OAAY,2BACzB,OAAKX,WAAL,CAAiBG,SAAjB,CAA4BQ,OAA5B,CACD,CAJH,CAMD,CACF,CATM,CAUR,C,yCAqBYb,U","file":"ApiManager.js","sourcesContent":["import lodash from 'lodash';\n\n/**\n * Interface for Api instance returnable from custom `adapterFindApi`.\n * @interface Api\n * @memberof module:ancient-cursor\n */\n\n/**\n * @function\n * @memberof module:ancient-cursor\n * @name Api#receiveQuery\n * @param {UniqueId} channelId\n * @param {Query} query\n * @param {UniqueId} cursorId\n * @param {Api~sendBundles} sendBundles\n */\n\n/**\n * @function\n * @memberof module:ancient-cursor\n * @name Api#channelDisconnected\n * @param {UniqueId} channelId\n * @param {Api~sendBundles} sendBundles\n */\n\n/**\n * @function\n * @memberof module:ancient-cursor\n * @name Api#cursorDestroyed\n * @param {UniqueId} channelId\n * @param {UniqueId} cursorId\n * @param {Api~sendBundles} sendBundles\n */\n\n/**\n * @callback ApiManager~sendBundles\n * @memberof module:ancient-cursor\n * @param {UniqueId} channelId\n * @param {...Bundle} bundles\n */\n\n/**\n * Manager of many api for sync data with cursors.\n * @class\n * @memberof module:ancient-cursor\n */\nclass ApiManager {\n  \n  /**\n   * @constructs ApiManager\n   * @param {ApiManager~adapterFindApi} adapterFindApi\n   * @param {ApiManager~adapterSend} adapterSend\n   */\n  constructor(adapterFindApi, adapterSend) {\n    this.adapterFindApi = adapterFindApi;\n    this.adapterSend = adapterSend;\n    this.relations = {};\n  }\n\n  /**\n   * Find api object.\n   * @param {Query} apiQuery\n   * @returns {Promise} - {@link ApiObject}\n   */\n  findApi(apiQuery) {\n    return this.adapterFindApi(apiQuery);\n  }\n  \n  /**\n   * Receive some query from some channelId, with possible need to sync result with some cursorId on channel cursors namespace.\n   * @param {UniqueId} channelId\n   * @param {Query} apiQuery\n   * @param {Query} query\n   * @param {UniqueId} cursorId\n   * @returns {Promise} - {@link ApiObject}\n   */\n  receiveQuery(channelId, apiQuery, query, cursorId) {\n    return this.findApi(apiQuery).then((api) => {\n      lodash.set(this.relations, [channelId, cursorId], apiQuery);\n      api.receiveQuery(\n        channelId, query, cursorId,\n        (channelId, ...bundles) => {\n          this.adapterSend(channelId, bundles);\n        }\n      );\n      return api;\n    });\n  }\n  \n  /**\n   * Call channelDisconnected method apply cursorDestroyed for each cursor used in current channelId.\n   * @param {UniqueId} channelId\n   */\n  channelDisconnected(channelId) {\n    var cursors = lodash.get(this.relations, [channelId]);\n    \n    var promises = [];\n    var apis = {};\n    for (var cursorId in cursors) {\n      if (!apis[cursors[cursorId]]) {\n        apis[cursors[cursorId]] = true;\n        promises.push(((channelId, cursorId) => {\n          return new Promise(() => {\n            return this.findApi(cursors[cursorId]).then((api) => {\n              lodash.set(this.relations, [channelId, cursorId], cursors[cursorId]);\n              if (typeof api.channelDisconnected == 'function') {\n                api.channelDisconnected(\n                  channelId, (channelId, ...bundles) => {\n                    this.adapterSend(channelId, bundles);\n                  }\n                );\n              }\n              return api;\n            });\n          });\n        })(channelId, cursorId));\n      }\n      promises.push(((channelId, cursorId) => {\n        return new Promise(() => this.cursorDestroyed(channelId, cursorId));\n      })(channelId, cursorId));\n    }\n    \n    delete this.relations[channelId];\n\n    return promises;\n  }\n  \n  /**\n   * Call cursorDestroyed method into api serving for current cursor sync.\n   * @param {UniqueId} channelId\n   * @param {UniqueId} cursorId\n   */\n  cursorDestroyed(channelId, cursorId) {\n    var apiQuery = lodash.get(this.relations, [channelId, cursorId]);\n    return this.findApi(apiQuery).then((api) => {\n      if (typeof api.cursorDestroyed == 'function') {\n        api.cursorDestroyed(\n          channelId, cursorId,\n          (channelId, ...bundles) => {\n            this.adapterSend(channelId, bundles);\n          }\n        );\n      }\n    });\n  }\n}\n\n/**\n * @callback ApiManager~adapterFindApi\n * @memberof module:ancient-cursor\n * @param {Query} apiQuery\n * @returns {Promise} - {@link ApiObject}\n * @description\n * Must be sended into `ApiManager` into constructor. Used for found api instance by apiQuery, from custom application storage logic.\n */\n\n/**\n * @callback ApiManager~adapterSend\n * @memberof module:ancient-cursor\n * @param {UniqueId} channelId\n * @param {Bundle[]} bundles\n * @description\n * Must be sended into `ApiManager` into constructor. Used for send bundles from api to cursor into current and channelId within custom application logic.\n */\n\nexport default ApiManager;"]}
{"version":3,"sources":["../src/lib/ApiManager.js"],"names":["ApiManager","adapterFindApi","adapterSend","relations","apiQuery","clientId","query","cursorId","findApi","then","api","set","receiveQuery","bundles","cursors","get","promises","push","Promise","cursorDestroyed"],"mappings":"ikBAAA,8B,kRA+CMA,W,YAOJ,oBAAYC,cAAZ,CAA4BC,WAA5B,CAAyC,kCACvC,KAAKD,cAAL,CAAsBA,cAAtB,CACA,KAAKC,WAAL,CAAmBA,WAAnB,CACA,KAAKC,SAAL,CAAiB,EAClB,C,+DAOOC,Q,CAAU,CAChB,MAAO,MAAKH,cAAL,CAAoBG,QAApB,CACR,C,kDAUYC,Q,CAAUD,Q,CAAUE,K,CAAOC,Q,CAAU,gBAChD,MAAO,MAAKC,OAAL,CAAaJ,QAAb,EAAuBK,IAAvB,CAA4B,SAACC,GAAD,CAAS,CAC1C,iBAAOC,GAAP,CAAW,MAAKR,SAAhB,CAA2B,CAACE,QAAD,CAAWE,QAAX,CAA3B,CAAiDH,QAAjD,EACAM,IAAIE,YAAJ,CACEP,QADF,CACYC,KADZ,CACmBC,QADnB,CAEE,SAACF,QAAD,CAAWQ,OAAX,CAAuB,CACrB,MAAKX,WAAL,CAAiBG,QAAjB,CAA2BQ,OAA3B,CACD,CAJH,EAMA,MAAOH,IACR,CATM,CAUR,C,8DAMkBL,Q,CAAU,iBAC3B,GAAIS,SAAU,iBAAOC,GAAP,CAAW,KAAKZ,SAAhB,CAA2B,CAACE,QAAD,CAA3B,CAAd,CAEA,GAAIW,UAAW,EAAf,CACA,IAAK,GAAIT,SAAT,GAAqBO,QAArB,CAA8B,CAC5BE,SAASC,IAAT,CAAe,SAACZ,QAAD,CAAWE,QAAX,CAAwB,CACrC,MAAO,IAAIW,QAAJ,CAAY,iBAAM,QAAKC,eAAL,CAAqBd,QAArB,CAA+BE,QAA/B,CAAN,CAAZ,CACR,CAFa,CAEXF,QAFW,CAEDE,QAFC,CAAd,CAGD,CAED,MAAOS,SACR,C,wDAOeX,Q,CAAUE,Q,CAAU,iBAClC,GAAIH,UAAW,iBAAOW,GAAP,CAAW,KAAKZ,SAAhB,CAA2B,CAACE,QAAD,CAAWE,QAAX,CAA3B,CAAf,CACA,MAAO,MAAKC,OAAL,CAAaJ,QAAb,EAAuBK,IAAvB,CAA4B,SAACC,GAAD,CAAS,CAC1CA,IAAIS,eAAJ,CACEd,QADF,CACYE,QADZ,CAEE,SAACF,QAAD,CAAWQ,OAAX,CAAuB,CACrB,OAAKX,WAAL,CAAiBG,QAAjB,CAA2BQ,OAA3B,CACD,CAJH,CAMD,CAPM,CAQR,C,yCAqBYb,U","file":"ApiManager.js","sourcesContent":["import lodash from 'lodash';\n\n/**\n * Interface for Api instance returnable from custom `adapterFindApi`.\n * @interface Api\n * @memberof module:ancient-cursor\n */\n\n/**\n * @function\n * @memberof module:ancient-cursor\n * @name Api#receiveQuery\n * @param {UniqueId} clientId\n * @param {Query} query\n * @param {UniqueId} cursorId\n * @param {Api~sendBundles} sendBundles\n */\n\n/**\n * @function\n * @memberof module:ancient-cursor\n * @name Api#clientDisconnected\n * @param {UniqueId} clientId\n * @param {Api~sendBundles} sendBundles\n */\n\n/**\n * @function\n * @memberof module:ancient-cursor\n * @name Api#cursorDestroyed\n * @param {UniqueId} clientId\n * @param {UniqueId} cursorId\n * @param {Api~sendBundles} sendBundles\n */\n\n/**\n * @callback ApiManager~sendBundles\n * @memberof module:ancient-cursor\n * @param {UniqueId} clientId\n * @param {Bundle[]} bundles\n */\n\n/**\n * Manager of many api for sync data with cursors.\n * @class\n * @memberof module:ancient-cursor\n */\nclass ApiManager {\n  \n  /**\n   * @constructs ApiManager\n   * @param {ApiManager~adapterFindApi} adapterFindApi\n   * @param {ApiManager~adapterSend} adapterSend\n   */\n  constructor(adapterFindApi, adapterSend) {\n    this.adapterFindApi = adapterFindApi;\n    this.adapterSend = adapterSend;\n    this.relations = {};\n  }\n\n  /**\n   * Find api object.\n   * @param {Query} apiQuery\n   * @returns {Promise} - {@link ApiObject}\n   */\n  findApi(apiQuery) {\n    return this.adapterFindApi(apiQuery);\n  }\n  \n  /**\n   * Receive some query from some clientId, with possible need to sync result with some cursorId on client cursors namespace.\n   * @param {UniqueId} clientId\n   * @param {Query} apiQuery\n   * @param {Query} query\n   * @param {UniqueId} cursorId\n   * @returns {Promise} - {@link ApiObject}\n   */\n  receiveQuery(clientId, apiQuery, query, cursorId) {\n    return this.findApi(apiQuery).then((api) => {\n      lodash.set(this.relations, [clientId, cursorId], apiQuery);\n      api.receiveQuery(\n        clientId, query, cursorId,\n        (clientId, bundles) => {\n          this.adapterSend(clientId, bundles);\n        }\n      );\n      return api;\n    });\n  }\n  \n  /**\n   * Call clientDisconnected method apply cursorDestroyed for each cursor used in current clientId.\n   * @param {UniqueId} clientId\n   */\n  clientDisconnected(clientId) {\n    var cursors = lodash.get(this.relations, [clientId]);\n    \n    var promises = [];\n    for (var cursorId in cursors) {\n      promises.push(((clientId, cursorId) => {\n        return new Promise(() => this.cursorDestroyed(clientId, cursorId));\n      })(clientId, cursorId));\n    }\n\n    return promises;\n  }\n  \n  /**\n   * Call cursorDestroyed method into api serving for current cursor sync.\n   * @param {UniqueId} clientId\n   * @param {UniqueId} cursorId\n   */\n  cursorDestroyed(clientId, cursorId) {\n    var apiQuery = lodash.get(this.relations, [clientId, cursorId]);\n    return this.findApi(apiQuery).then((api) => {\n      api.cursorDestroyed(\n        clientId, cursorId,\n        (clientId, bundles) => {\n          this.adapterSend(clientId, bundles);\n        }\n      );\n    });\n  }\n}\n\n/**\n * @callback ApiManager~adapterFindApi\n * @memberof module:ancient-cursor\n * @param {Query} apiQuery\n * @returns {Promise} - {@link ApiObject}\n * @description\n * Must be sended into `ApiManager` into constructor. Used for found api instance by apiQuery, from custom application storage logic.\n */\n\n/**\n * @callback ApiManager~adapterSend\n * @memberof module:ancient-cursor\n * @param {UniqueId} clientId\n * @param {Bundle[]} bundles\n * @description\n * Must be sended into `ApiManager` into constructor. Used for send bundles from api to cursor into current and clientId within custom application logic.\n */\n\nexport default ApiManager;"]}
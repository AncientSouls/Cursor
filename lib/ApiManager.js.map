{"version":3,"sources":["../src/lib/ApiManager.js"],"names":["ApiManager","adapterFindApi","adapterSend","relations","apiQuery","clientId","channelId","query","cursorId","findApi","then","api","set","receiveQuery","bundles","cursors","get","promises","push","Promise","cursorDestroyed"],"mappings":"8lBAAA,8B,+QAEA;;;GAKA;;;;;;;;GAUA;;;;;;GAQA;;;;;;;GASA;;;;GAMA;;MAGaA,W,SAAAA,U,YAEX;;;;KAKA,oBAAYC,cAAZ,CAA4BC,WAA5B,CAAyC,kCACvC,KAAKD,cAAL,CAAsBA,cAAtB,CACA,KAAKC,WAAL,CAAmBA,WAAnB,CACA,KAAKC,SAAL,CAAiB,EAClB,CAED;;;;oEAKQC,Q,CAAU,CAChB,MAAO,MAAKH,cAAL,CAAoBG,QAApB,CACR,CAED;;;;;;;;uDASaC,Q,CAAUC,S,CAAWF,Q,CAAUG,K,CAAOC,Q,CAAU,gBAC3D,MAAO,MAAKC,OAAL,CAAaL,QAAb,EAAuBM,IAAvB,CAA4B,SAACC,GAAD,CAAS,CAC1C,iBAAOC,GAAP,CAAW,MAAKT,SAAhB,CAA2B,CAACE,QAAD,CAAWC,SAAX,CAAsBE,QAAtB,CAA3B,CAA4DJ,QAA5D,EACAO,IAAIE,YAAJ,CACER,QADF,CACYC,SADZ,CACuBC,KADvB,CAC8BC,QAD9B,CAEE,SAACH,QAAD,CAAWC,SAAX,CAAsBQ,OAAtB,CAAkC,CAChC,MAAKZ,WAAL,CAAiBG,QAAjB,CAA2BC,SAA3B,CAAsCQ,OAAtC,CACD,CAJH,EAMA,MAAOH,IACR,CATM,CAUR,CAED;;;;qEAKoBN,Q,CAAUC,S,CAAW,iBACvC,GAAIS,SAAU,iBAAOC,GAAP,CAAW,KAAKb,SAAhB,CAA2B,CAACE,QAAD,CAAWC,SAAX,CAA3B,CAAd,CAEA,GAAIW,UAAW,EAAf,CACA,IAAK,GAAIT,SAAT,GAAqBO,QAArB,CAA8B,CAC5BE,SAASC,IAAT,CAAe,SAACb,QAAD,CAAWC,SAAX,CAAsBE,QAAtB,CAAmC,CAChD,MAAO,IAAIW,QAAJ,CAAY,iBAAM,QAAKC,eAAL,CAAqBf,QAArB,CAA+BC,SAA/B,CAA0CE,QAA1C,CAAN,CAAZ,CACR,CAFa,CAEXH,QAFW,CAEDC,SAFC,CAEUE,QAFV,CAAd,CAGD,CAED,MAAOS,SACR,CAED;;;;;6DAMgBZ,Q,CAAUC,S,CAAWE,Q,CAAU,iBAC7C,GAAIJ,UAAW,iBAAOY,GAAP,CAAW,KAAKb,SAAhB,CAA2B,CAACE,QAAD,CAAWC,SAAX,CAAsBE,QAAtB,CAA3B,CAAf,CACA,MAAO,MAAKC,OAAL,CAAaL,QAAb,EAAuBM,IAAvB,CAA4B,SAACC,GAAD,CAAS,CAC1CA,IAAIS,eAAJ,CACEf,QADF,CACYC,SADZ,CACuBE,QADvB,CAEE,SAACH,QAAD,CAAWC,SAAX,CAAsBQ,OAAtB,CAAkC,CAChC,OAAKZ,WAAL,CAAiBG,QAAjB,CAA2BC,SAA3B,CAAsCQ,OAAtC,CACD,CAJH,CAMD,CAPM,CAQR,C,yBAGH;;;;;;GAQA","file":"ApiManager.js","sourcesContent":["import lodash from 'lodash';\n\n/**\n * Interface for Api instance returnable from custom `adapterFindApi`.\n * @interface Api\n */\n\n/**\n * @function\n * @name Api#receiveQuery\n * @param {UniqueId} clientId\n * @param {UniqueId} channelId\n * @param {Query} query\n * @param {UniqueId} cursorId\n * @param {Api~sendBundles} sendBundles\n */\n\n/**\n * @function\n * @name Api#channelDisconnected\n * @param {UniqueId} clientId\n * @param {UniqueId} channelId\n * @param {Api~sendBundles} sendBundles\n */\n\n/**\n * @function\n * @name Api#cursorDestroyed\n * @param {UniqueId} clientId\n * @param {UniqueId} channelId\n * @param {UniqueId} cursorId\n * @param {Api~sendBundles} sendBundles\n */\n\n/**\n * @callback ApiManager~sendBundles\n * @param {UniqueId} channelId\n * @param {Bundle[]} bundles\n */\n\n/**\n * Manager of many api for sync data with cursors.\n */\nexport class ApiManager {\n  \n  /**\n   * @constructs ApiManager\n   * @param {ApiManager~adapterFindApi} adapterFindApi\n   * @param {ApiManager~adapterSend} adapterSend\n   */\n  constructor(adapterFindApi, adapterSend) {\n    this.adapterFindApi = adapterFindApi;\n    this.adapterSend = adapterSend;\n    this.relations = {};\n  }\n\n  /**\n   * Find api object.\n   * @param {Query} apiQuery\n   * @returns {Promise} - {@link ApiObject}\n   */\n  findApi(apiQuery) {\n    return this.adapterFindApi(apiQuery);\n  }\n  \n  /**\n   * Receive some query from some clientId, with possible need to sync result with some cursorId on client cursors namespace.\n   * @param {UniqueId} clientId\n   * @param {UniqueId} channelId\n   * @param {Query} apiQuery\n   * @param {Query} query\n   * @param {UniqueId} cursorId\n   * @returns {Promise} - {@link ApiObject}\n   */\n  receiveQuery(clientId, channelId, apiQuery, query, cursorId) {\n    return this.findApi(apiQuery).then((api) => {\n      lodash.set(this.relations, [clientId, channelId, cursorId], apiQuery);\n      api.receiveQuery(\n        clientId, channelId, query, cursorId,\n        (clientId, channelId, bundles) => {\n          this.adapterSend(clientId, channelId, bundles);\n        }\n      );\n      return api;\n    });\n  }\n  \n  /**\n   * Call channelDisconnected method apply cursorDestroyed for each cursor used in current channelId.\n   * @param {UniqueId} clientId\n   * @param {UniqueId} channelId\n   */\n  channelDisconnected(clientId, channelId) {\n    var cursors = lodash.get(this.relations, [clientId, channelId]);\n    \n    var promises = [];\n    for (var cursorId in cursors) {\n      promises.push(((clientId, channelId, cursorId) => {\n        return new Promise(() => this.cursorDestroyed(clientId, channelId, cursorId));\n      })(clientId, channelId, cursorId));\n    }\n\n    return promises;\n  }\n  \n  /**\n   * Call cursorDestroyed method into api serving for current cursor sync.\n   * @param {UniqueId} clientId\n   * @param {UniqueId} channelId\n   * @param {UniqueId} cursorId\n   */\n  cursorDestroyed(clientId, channelId, cursorId) {\n    var apiQuery = lodash.get(this.relations, [clientId, channelId, cursorId]);\n    return this.findApi(apiQuery).then((api) => {\n      api.cursorDestroyed(\n        clientId, channelId, cursorId,\n        (clientId, channelId, bundles) => {\n          this.adapterSend(clientId, channelId, bundles);\n        }\n      );\n    });\n  }\n}\n\n/**\n * @callback ApiManager~adapterFindApi\n * @param {Query} apiQuery\n * @returns {Promise} - {@link ApiObject}\n * @description\n * Must be sended into `ApiManager` into constructor. Used for found api instance by apiQuery, from custom application storage logic.\n */\n\n/**\n * @callback ApiManager~adapterSend\n * @param {UniqueId} clientId\n * @param {UniqueId} channelId\n * @param {Bundle[]} bundles\n * @description\n * Must be sended into `ApiManager` into constructor. Used for send bundles from api to cursor into current clientId and channelId within custom application logic.\n */"]}